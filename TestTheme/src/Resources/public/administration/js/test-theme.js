!function(){var e={477:function(){},832:function(){},950:function(){},58:function(){},700:function(e,i,n){var t=n(477);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),(0,n(534).A)("0a7a6e50",t,!0,{})},751:function(e,i,n){var t=n(832);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),(0,n(534).A)("06a0e21c",t,!0,{})},849:function(e,i,n){var t=n(950);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),(0,n(534).A)("280e39ff",t,!0,{})},93:function(e,i,n){var t=n(58);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),(0,n(534).A)("97b3e9de",t,!0,{})},534:function(e,i,n){"use strict";function t(e,i){for(var n=[],t={},s=0;s<i.length;s++){var l=i[s],a=l[0],o={id:e+":"+s,css:l[1],media:l[2],sourceMap:l[3]};t[a]?t[a].parts.push(o):n.push(t[a]={id:a,parts:[o]})}return n}n.d(i,{A:function(){return b}});var s,l="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!l)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},o=l&&(document.head||document.getElementsByTagName("head")[0]),d=null,r=0,c=!1,m=function(){},p=null,u="data-vue-ssr-id",v="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function b(e,i,n,s){c=n,p=s||{};var l=t(e,i);return f(l),function(i){for(var n=[],s=0;s<l.length;s++){var o=a[l[s].id];o.refs--,n.push(o)}i?f(l=t(e,i)):l=[];for(var s=0;s<n.length;s++){var o=n[s];if(0===o.refs){for(var d=0;d<o.parts.length;d++)o.parts[d]();delete a[o.id]}}}}function f(e){for(var i=0;i<e.length;i++){var n=e[i],t=a[n.id];if(t){t.refs++;for(var s=0;s<t.parts.length;s++)t.parts[s](n.parts[s]);for(;s<n.parts.length;s++)t.parts.push(g(n.parts[s]));t.parts.length>n.parts.length&&(t.parts.length=n.parts.length)}else{for(var l=[],s=0;s<n.parts.length;s++)l.push(g(n.parts[s]));a[n.id]={id:n.id,refs:1,parts:l}}}}function h(){var e=document.createElement("style");return e.type="text/css",o.appendChild(e),e}function g(e){var i,n,t=document.querySelector("style["+u+'~="'+e.id+'"]');if(t){if(c)return m;t.parentNode.removeChild(t)}if(v){var s=r++;i=M.bind(null,t=d||(d=h()),s,!1),n=M.bind(null,t,s,!0)}else i=k.bind(null,t=h()),n=function(){t.parentNode.removeChild(t)};return i(e),function(t){t?(t.css!==e.css||t.media!==e.media||t.sourceMap!==e.sourceMap)&&i(e=t):n()}}var w=(s=[],function(e,i){return s[e]=i,s.filter(Boolean).join("\n")});function M(e,i,n,t){var s=n?"":t.css;if(e.styleSheet)e.styleSheet.cssText=w(i,s);else{var l=document.createTextNode(s),a=e.childNodes;a[i]&&e.removeChild(a[i]),a.length?e.insertBefore(l,a[i]):e.appendChild(l)}}function k(e,i){var n=i.css,t=i.media,s=i.sourceMap;if(t&&e.setAttribute("media",t),p.ssrId&&e.setAttribute(u,i.id),s&&(n+="\n/*# sourceURL="+s.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},i={};function n(t){var s=i[t];if(void 0!==s)return s.exports;var l=i[t]={id:t,exports:{}};return e[t](l,l.exports,n),l.exports}n.d=function(e,i){for(var t in i)n.o(i,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:i[t]})},n.o=function(e,i){return Object.prototype.hasOwnProperty.call(e,i)},n.p="bundles/testtheme/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/testtheme/"),function(){"use strict";let{Component:e}=Shopware;e.override("sw-cms-sidebar",{template:'{% block sw_cms_sidebar_block_overview_category_options %}\n    {% parent %}\n    <option value="test-theme">Custom CMS</option>\n{% endblock %}\n'}),Shopware.Component.register("sw-cms-block-banner-slider",{template:'{% block sw_cms_block_banner_slider %}\n    <div class="sw-cms-block-banner-slider">\n        <slot name="slider"></slot>\n    </div>\n{% endblock %}\n'}),n(700),Shopware.Component.register("sw-cms-block-preview-banner-slider",{template:'{% block sw_cms_block_banner_slider_preview %}\n    <div class="sw-cms-preview-banner-slider">\n        <div class="btn btn-primary">\n            <sw-icon name="regular-long-arrow-left" />\n        </div>\n        <div class="slide">\n            <div class="content-container">\n                <div class="content">\n                    <p class="headline">Banner Slider</p>\n                    <p class="btn btn-primary"></p>\n                </div>\n            </div>\n        </div>\n        <div class="btn btn-primary">\n            <sw-icon name="regular-long-arrow-right" />\n        </div>\n    </div>\n\n{% endblock %}'}),Shopware.Service("cmsService").registerCmsBlock({name:"banner-slider",label:"Banner Slider",category:"test-theme",component:"sw-cms-block-banner-slider",previewComponent:"sw-cms-block-preview-banner-slider",defaultConfig:{marginBottom:"",marginTop:"",marginLeft:"",marginRight:"",sizingMode:"boxed"},slots:{slider:{type:"banner-slider"}}}),n(751);let{Component:i,Mixin:t,Context:s,Utils:l}=Shopware,{cloneDeep:a}=l.object;i.register("sw-cms-el-banner-slider",{template:'{% block sw_cms_el_banner_slider %}\n    <div class="sw-cms-banner_slider"\n         :class="{ \'gutter\': element.config.sliderSettings.value.gutter && element.config.sliderSettings.value.gutter !== \'0\'}">\n\n        <div v-for="(slide, index) in element.config.slides.value"\n             :key="slide.id + index"\n             class="slide"\n             :class="{ \'gutter\': element.config.sliderSettings.value.gutter && element.config.sliderSettings.value.gutter !== \'0\'}">\n\n            \n            <div v-if="slide.desktopMedia" class="image-container desktop-only">\n                Image\n            </div>\n\n            \n            <div v-if="slide.mobileMedia" class="image-container mobile-only">\n                Image\n            </div>\n\n            \n            <div class="content-container"\n                 :class="{ \'has-background-media\': slide.desktopMedia || slide.mobileMedia }">\n                <div class="content">\n                    <h2 v-if="slide.title" class="title">\n                        {{ slide.title }}\n                    </h2>\n                </div>\n            </div>\n\n        </div>\n    </div>\n{% endblock %}',mixins:[t.getByName("cms-element")],inject:["repositoryFactory"],data(){return{previewBackgroundMedia:[],previewBackgroundMediaHasInitLoaded:!1}},computed:{mediaRepository(){return this.repositoryFactory.create("media")},previewSlides(){let e=this.element?.config;if(!e?.slides?.value||!Array.isArray(e.slides.value))return[];let i=e.sliderSettings?.value||{},n=e.slides.value.filter(e=>e.active);if(i.loop&&n.length<i.items){let e=i.items-n.length;for(let i=0;i<e;i++)n.push(n[i%n.length])}return n.slice(0,i.items||n.length)},previewSlidesProxy(){return a(this.previewSlides)}},created(){this.createdComponent()},methods:{createdComponent(){this.initElementConfig("banner-slider"),this.initElementData("banner-slider"),this.element.config.slides.value[0].id||(this.element.config.slides.value[0].id=l.createId())}}}),n(849);let{Component:o,Mixin:d,Context:r,Utils:c,Data:m}=Shopware;o.register("sw-cms-el-config-banner-slider",{template:'{% block sw_cms_el_config_banner_slider %}\n    <div class="sw-cms-el-config-banner_slider">\n        <sw-tabs default-item="slides" position-identifier="sw-cms-el-config-banner_slider">\n            <template #default="{ active }">\n                {% block sw_cms_el_config_wpbanner_slider_tabs %}\n                    <sw-tabs-item name="slides" :active-tab="active">\n                        {{ $tc(\'Content\') }}\n                    </sw-tabs-item>\n                {% endblock %}\n            </template>\n\n            <template #content="{ active }">\n                {% block sw_cms_el_config_banner_slider_slides %}\n                    <div v-show="active === \'slides\'">\n                        {% block sw_cms_el_config_wpbanner_slider_slides_list %}\n                            <ul class="slides">\n                                <li v-for="(slide, index) in element.config.slides.value" :key="index" class="slide">\n                                    <sw-container columns="1fr auto">\n                                        <div class="settings">\n                                            <sw-collapse>\n                                                <template v-slot:header>\n                                                    <h2 class="mb-0">\n                                                        Slide {{ index + 1 }}\n                                                    </h2>\n                                                    <sw-icon name="regular-chevron-down-xxs"/>\n                                                </template>\n                                                <template v-slot:content>\n                                                    <sw-tabs default-item="main"\n                                                             position-identifier="sw-cms-el-config-banner_slider-slide-${index}">\n                                                        <template #default="{ active }">\n                                                            {% block sw_cms_el_config_ap_text_image_slider_slides_slide_tabs %}\n                                                                <sw-tabs-item name="main" :active-tab="active">\n                                                                    {{ $tc(\'Main Content\') }}\n                                                                </sw-tabs-item>\n                                                                <sw-tabs-item name="visibility" :active-tab="active">\n                                                                    {{ $tc(\'Visibility\') }}\n                                                                </sw-tabs-item>\n                                                            {% endblock %}\n                                                        </template>\n\n                                                        <template #content="{ active }">\n                                                            {% block main_content_tab %}\n                                                                <div v-show="active === \'main\'">\n                                                                    <sw-text-field v-model:value="slide.title"\n                                                                                   :label="$tc(\'Title\')"/>\n                                                                    <sw-text-editor v-model:value="slide.text"\n                                                                                    :label="$tc(\'Description\')"/>\n                                                                    <sw-text-editor v-model:value="slide.buttonText"\n                                                                                    :label="$tc(\'Button Text\')"/>\n                                                                    <sw-dynamic-url-field\n                                                                            v-model:value="slide.buttonUrl"/>\n                                                                    <sw-text-editor v-model:value="slide.linkText"\n                                                                                    :label="$tc(\'Link Text\')"/>\n                                                                    <sw-dynamic-url-field\n                                                                            v-model:value="slide.linkUrl"/>\n                                                                    <sw-switch-field v-model:value="slide.content"\n                                                                                     :label="$tc(\'Enable HTML Editor for Content\')">\n                                                                    </sw-switch-field>\n\n                                                                    <template v-if="slide.content">\n                                                                        <sw-text-editor\n                                                                                v-model:value="slide.contentText"\n                                                                                :label="$tc(\'Content\')"/>\n                                                                    </template>\n                                                                </div>\n                                                            {% endblock %}\n\n                                                            {% block visibility_tab %}\n                                                                <div v-show="active === \'visibility\'">\n                                                                    <sw-container>\n                                                                        <sw-upload-listener\n                                                                                :upload-tag="\'cms-block-media-config-desktop-\' + element.id"\n                                                                                auto-upload\n                                                                                @media-upload-finish="(media) => onFinishUploadDesktopMedia(media, index)">\n                                                                        </sw-upload-listener>\n\n                                                                        <sw-media-compact-upload-v2\n                                                                                v-if="slideDesktopMediaPreviews[index] !== undefined"\n                                                                                :label="$tc(\'Desktop Image or Video\')"\n                                                                                :source="slideDesktopMediaPreviews[index]"\n                                                                                :upload-tag="\'cms-block-media-config-desktop-\' + element.id"\n                                                                                :default-folder="cmsPageState.pageEntityName"\n                                                                                file-accept="*/*"\n                                                                                @media-upload-remove-image="() => onRemoveSlideDesktopMedia(slide)"\n                                                                                @selection-change="(media) => onChangeDesktopMedia(media, index)">\n                                                                        </sw-media-compact-upload-v2>\n\n                                                                        <sw-upload-listener\n                                                                                :upload-tag="\'cms-block-media-config-mobile-\' + element.id"\n                                                                                auto-upload\n                                                                                @media-upload-finish="(media) => onFinishUploadMobileMedia(media, index)">\n                                                                        </sw-upload-listener>\n\n                                                                        <sw-media-compact-upload-v2\n                                                                                v-if="slideMobileMediaPreviews[index] !== undefined"\n                                                                                :label="$tc(\'Mobile Image or Video\')"\n                                                                                :source="slideMobileMediaPreviews[index]"\n                                                                                :upload-tag="\'cms-block-media-config-mobile-\' + element.id"\n                                                                                :default-folder="cmsPageState.pageEntityName"\n                                                                                file-accept="*/*"\n                                                                                @media-upload-remove-image="() => onRemoveSlideMobileMedia(slide)"\n                                                                                @selection-change="(media) => onChangeMobileMedia(media, index)">\n                                                                        </sw-media-compact-upload-v2>\n                                                                    </sw-container>\n                                                                </div>\n                                                            {% endblock %}\n                                                        </template>\n                                                    </sw-tabs>\n                                                </template>\n                                            </sw-collapse>\n                                        </div>\n\n                                        {% block sw_cms_el_config_wpbanner_slider_slides_slide_actions %}\n                                            <div class="actions">\n                                                <sw-button square :disabled="index === 0" size="small" class="move-up"\n                                                           @click="onClickMoveSlide(index, \'up\')">\n                                                    <sw-icon name="regular-chevron-up-xxs"/>\n                                                </sw-button>\n                                                <sw-container columns="1fr 1fr" gap="10px">\n                                                    <sw-button square size="small" variant="ghost"\n                                                               @click="onClickDuplicateSlide(slide)">\n                                                        <sw-icon small name="regular-products-s"/>\n                                                    </sw-button>\n\n                                                    <sw-button square size="small" class="remove"\n                                                               :disabled="element.config.slides.value.length === 1"\n                                                               variant="danger" @click="onClickRemoveSlide(slide)">\n                                                        <sw-icon small name="regular-trash"/>\n                                                    </sw-button>\n                                                </sw-container>\n                                                <sw-button square\n                                                           :disabled="index === element.config.slides.value.length - 1"\n                                                           size="small" class="move-down"\n                                                           @click="onClickMoveSlide(index, \'down\')">\n                                                    <sw-icon name="regular-chevron-down-xxs"/>\n                                                </sw-button>\n                                            </div>\n                                        {% endblock %}\n                                    </sw-container>\n                                </li>\n                            </ul>\n                        {% endblock %}\n                        <sw-button block variant="ghost" @click="onClickAddSlide" class="add-slide-btn">\n                            Add\n                        </sw-button>\n                    </div>\n                {% endblock %}\n            </template>\n        </sw-tabs>\n    </div>\n{% endblock %}',mixins:[d.getByName("cms-element")],inject:["repositoryFactory"],data(){return{mediaRepository:null,slideDesktopMediaPreviews:[],slideMobileMediaPreviews:[]}},created(){this.createdComponent(),this.getMediaEntityPreviews(),this.initRepositories()},watch:{element:{deep:!0,handler(){this.getMediaEntityPreviews()}}},methods:{initRepositories(){this.mediaRepository=this.repositoryFactory.create("media")},async createdComponent(){this.initElementConfig("banner-slider")},async getMediaEntityPreviews(){if(this.element?.config?.slides?.value)for(let[e,i]of(this.slideDesktopMediaPreviews=[],this.slideMobileMediaPreviews=[],this.element.config.slides.value.entries())){if(i.desktopMedia)try{let n=await this.mediaRepository.get(i.desktopMedia,r.api);this.$set(this.slideDesktopMediaPreviews,e,n.url)}catch(i){console.warn("Failed to fetch desktop media:",i),this.$set(this.slideDesktopMediaPreviews,e,null)}else this.$set(this.slideDesktopMediaPreviews,e,null);if(i.mobileMedia)try{let n=await this.mediaRepository.get(i.mobileMedia,r.api);this.$set(this.slideMobileMediaPreviews,e,n.url)}catch(i){console.warn("Failed to fetch mobile media:",i),this.$set(this.slideMobileMediaPreviews,e,null)}else this.$set(this.slideMobileMediaPreviews,e,null)}},async onChangeDesktopMedia(e,i){e&&e[0]&&(this.$set(this.slideDesktopMediaPreviews,i,e[0].url),this.element.config.slides.value[i].desktopMedia=e[0].id,this.$emit("element-update",this.element))},async onChangeMobileMedia(e,i){e&&e[0]&&(this.$set(this.slideMobileMediaPreviews,i,e[0].url),this.element.config.slides.value[i].mobileMedia=e[0].id,this.$emit("element-update",this.element))},async onFinishUploadDesktopMedia(e,i){if(!e||"string"!=typeof e.targetId){console.warn("[BannerSlider] Invalid mediaItem:",e,"at index",i);return}try{let n=await this.mediaRepository.get(e.targetId,r.api);if(!n||!n.id){console.warn("[BannerSlider] Media entity not found for ID:",e.targetId);return}this.$set(this.slideDesktopMediaPreviews,i,n.url),this.element.config.slides.value[i].desktopMedia=n.id,this.$emit("element-update",this.element)}catch(e){console.error("[BannerSlider] Failed to fetch desktop media entity:",e)}},async onFinishUploadMobileMedia(e,i){if(e&&e.targetId&&void 0!==i)try{let n=await this.mediaRepository.get(e.targetId,r.api);this.$set(this.slideMobileMediaPreviews,i,n.url),this.element.config.slides.value[i].mobileMedia=n.id,this.$emit("element-update",this.element)}catch(e){console.error("Failed to fetch mobile media entity:",e)}},onRemoveSlideMobileMedia(e){let i=this.element.config.slides.value.indexOf(e);this.$set(this.slideMobileMediaPreviews,i,null),e.mobileMedia=null},onRemoveSlideDesktopMedia(e){let i=this.element.config.slides.value.indexOf(e);this.$set(this.slideDesktopMediaPreviews,i,null),e.desktopMedia=null},onClickAddSlide(){let e={active:!0,id:c.createId(),contentType:"default",title:"Lorem Ipsum",text:"Lorem Ipsum",image:"",buttonText:"Lorem Ipsum",buttonUrl:"url",linkText:"Lorem Ipsum",linkUrl:"link",content:"",contentText:"",desktopMedia:null,mobileMedia:null};this.element.config.slides.value.push(e),this.slideDesktopMediaPreviews.push(null),this.slideMobileMediaPreviews.push(null),this.getMediaEntityPreviews()},onClickMoveSlide(e,i){let n=this.element.config.slides.value,t=null;"up"===i?t=e-1:"down"===i&&(t=e+1),null!==t&&n.splice(t,0,n.splice(e,1)[0]),this.element.config.slides.value=n,this.getMediaEntityPreviews()},onClickDuplicateSlide(e){let i=this.element.config.slides.value,n=i.indexOf(e),t={...e,id:c.createId(),name:e.name+" "+this.$tc("Copy"),desktopMedia:e.desktopMedia,mobileMedia:e.mobileMedia};i.splice(n+1,0,t),this.element.config.slides.value=i,this.getMediaEntityPreviews()},onClickRemoveSlide(e){let i=this.element.config.slides.value,n=i.indexOf(e);i.splice(n,1),this.element.config.slides.value=i,this.getMediaEntityPreviews()}}}),n(93),Shopware.Component.register("sw-cms-el-preview-banner-slider",{template:'{% block sw_cms_el_preview_banner_slider %}\n    <div class="sw-cms-el-preview-banner-slider">\n        <div class="slide">\n            <div class="content-container">\n                <div class="content">\n                    <p class="headline">Lorem ipsum dolor sit amet</p>\n                    <p class="btn btn-primary">Lorem ipsum</p>\n                </div>\n            </div>\n        </div>\n        <div class="controls">\n            <div class="btn btn-primary">\n                <sw-icon name="regular-long-arrow-left"/>\n            </div>\n            <div class="btn btn-primary">\n                <sw-icon name="regular-long-arrow-right"/>\n            </div>\n        </div>\n    </div>\n{% endblock %}'}),Shopware.Service("cmsService").registerCmsElement({name:"banner-slider",label:"Banner Slider",component:"sw-cms-el-banner-slider",configComponent:"sw-cms-el-config-banner-slider",previewComponent:"sw-cms-el-preview-banner-slider",defaultConfig:{slides:{source:"static",value:[{active:!0,name:"Slide 1",text:"Slide",desktopMedia:"",mobileMedia:""}]},sliderSettings:{source:"static",value:{}}}})}()}();